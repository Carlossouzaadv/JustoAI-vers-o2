/**
 * Timeline Unificada Inteligente - Configura√ß√£o
 *
 * Define limiares ajust√°veis para associa√ß√£o sem√¢ntica e detec√ß√£o de conflitos.
 * Valores podem ser sobrescritos via vari√°veis de ambiente (.env).
 */

export interface TimelineConfig {
  // Limiar de similaridade para associar como ENRICHMENT (0-1)
  // Se dois eventos t√™m similaridade > este valor, o novo enriquece o base
  similarityThresholdEnrichment: number;

  // Limiar de similaridade para associar como RELATED (0-1)
  // Se dois eventos t√™m similaridade > este valor mas < enrichment, s√£o RELATED
  similarityThresholdRelated: number;

  // Proximidade de datas para considerar eventos relacionados (em dias)
  // Se data diferen√ßa <= este valor, podem ser RELATED mesmo com baixa similaridade
  dateProximityDays: number;

  // Custo de enriquecimento em cr√©ditos (por evento)
  // ~100 tokens no Gemini Flash = 0.001 cr√©dito
  enrichmentCreditCost: number;

  // Modelo de IA padr√£o para enriquecimento
  enrichmentModel: string;

  // M√°ximo de tentativas de enriquecimento antes de fallback
  maxEnrichmentRetries: number;

  // Timeout para chamada √† Gemini Flash (em ms)
  enrichmentTimeoutMs: number;
}

/**
 * Obt√©m configura√ß√£o de timeline com valores de .env ou padr√µes
 */
export function getTimelineConfig(): TimelineConfig {
  return {
    // Limiares de Similaridade - ajust√°veis via .env
    similarityThresholdEnrichment: parseFloat(
      process.env.TIMELINE_SIMILARITY_THRESHOLD_ENRICHMENT || '0.85'
    ),
    similarityThresholdRelated: parseFloat(
      process.env.TIMELINE_SIMILARITY_THRESHOLD_RELATED || '0.70'
    ),

    // Proximidade de datas
    dateProximityDays: parseInt(
      process.env.TIMELINE_DATE_PROXIMITY_DAYS || '2'
    ),

    // Custos e configura√ß√£o de IA
    enrichmentCreditCost: parseFloat(
      process.env.TIMELINE_ENRICHMENT_CREDIT_COST || '0.001'
    ),
    enrichmentModel:
      process.env.TIMELINE_ENRICHMENT_MODEL || 'gemini-1.5-flash',
    maxEnrichmentRetries: parseInt(
      process.env.TIMELINE_MAX_ENRICHMENT_RETRIES || '3'
    ),
    enrichmentTimeoutMs: parseInt(
      process.env.TIMELINE_ENRICHMENT_TIMEOUT_MS || '10000'
    ),
  };
}

/**
 * Validar que os limiares est√£o em range v√°lido
 */
export function validateTimelineConfig(config: TimelineConfig): void {
  if (config.similarityThresholdEnrichment < 0 || config.similarityThresholdEnrichment > 1) {
    throw new Error(
      `TIMELINE_SIMILARITY_THRESHOLD_ENRICHMENT deve estar entre 0 e 1, recebido: ${config.similarityThresholdEnrichment}`
    );
  }

  if (config.similarityThresholdRelated < 0 || config.similarityThresholdRelated > 1) {
    throw new Error(
      `TIMELINE_SIMILARITY_THRESHOLD_RELATED deve estar entre 0 e 1, recebido: ${config.similarityThresholdRelated}`
    );
  }

  if (config.similarityThresholdEnrichment <= config.similarityThresholdRelated) {
    throw new Error(
      `TIMELINE_SIMILARITY_THRESHOLD_ENRICHMENT (${config.similarityThresholdEnrichment}) deve ser > RELATED (${config.similarityThresholdRelated})`
    );
  }

  if (config.dateProximityDays < 0) {
    throw new Error(
      `TIMELINE_DATE_PROXIMITY_DAYS deve ser >= 0, recebido: ${config.dateProximityDays}`
    );
  }

  if (config.enrichmentCreditCost <= 0) {
    throw new Error(
      `TIMELINE_ENRICHMENT_CREDIT_COST deve ser > 0, recebido: ${config.enrichmentCreditCost}`
    );
  }
}

// Exportar inst√¢ncia padr√£o
export const timelineConfig = getTimelineConfig();

// Validar ao carregar
try {
  validateTimelineConfig(timelineConfig);
} catch (error) {
  console.error('‚ùå Erro na configura√ß√£o da Timeline:', error);
  // Em produ√ß√£o, falhar r√°pido; em dev, apenas log
  if (process.env.NODE_ENV === 'production') {
    throw error;
  }
}

/**
 * Debug: Exibir configura√ß√£o atual (use apenas em desenvolvimento)
 */
export function debugTimelineConfig(): void {
  console.log('üìä Timeline Unificada - Configura√ß√£o Atual:');
  console.log(
    `  ‚úì Enrichment Threshold: ${timelineConfig.similarityThresholdEnrichment}`
  );
  console.log(
    `  ‚úì Related Threshold: ${timelineConfig.similarityThresholdRelated}`
  );
  console.log(
    `  ‚úì Date Proximity: ¬±${timelineConfig.dateProximityDays} dias`
  );
  console.log(
    `  ‚úì Enrichment Cost: ${timelineConfig.enrichmentCreditCost} cr√©dito`
  );
  console.log(
    `  ‚úì Enrichment Model: ${timelineConfig.enrichmentModel}`
  );
  console.log(
    `  ‚úì Enrichment Timeout: ${timelineConfig.enrichmentTimeoutMs}ms`
  );
}
