// ================================================================
// API ROUTE: POST /api/cases/[id]/regenerate-summary
// Regenera o resumo consolidado do caso
// ================================================================

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { getAuthenticatedUser, unauthorizedResponse } from '@/lib/auth-helper';
import { ICONS } from '@/lib/icons';
import { updateCaseSummaryDescription } from '@/lib/services/summaryConsolidator';

// ================================================================
// MAIN HANDLER
// ================================================================

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    // ============================================================
    // 1. AUTENTICAÇÃO
    // ============================================================

    const user = await getAuthenticatedUser(request);

    if (!user) {
      return unauthorizedResponse('Não autenticado');
    }

    const caseId = params.id;

    console.log(`${ICONS.ROBOT} [Regenerate Summary] Regenerando resumo para caso ${caseId}`);

    // ============================================================
    // 2. VALIDAR CASE E PERMISSÕES
    // ============================================================

    const caseData = await prisma.case.findFirst({
      where: {
        id: caseId,
        workspace: {
          users: {
            some: {
              userId: user.id
            }
          }
        }
      },
      select: {
        id: true,
        number: true,
        title: true
      }
    });

    if (!caseData) {
      return NextResponse.json(
        { success: false, error: 'Caso não encontrado ou acesso negado' },
        { status: 404 }
      );
    }

    console.log(`${ICONS.SUCCESS} [Regenerate Summary] Caso validado: ${caseData.number}`);

    // ============================================================
    // 3. REGENERAR RESUMO
    // ============================================================

    console.log(`${ICONS.EXTRACT} [Regenerate Summary] Consolidando novo resumo...`);

    const newDescription = await updateCaseSummaryDescription(caseId);

    console.log(`${ICONS.SUCCESS} [Regenerate Summary] Resumo regenerado com sucesso`);

    // ============================================================
    // 4. RETORNAR RESPOSTA
    // ============================================================

    return NextResponse.json(
      {
        success: true,
        data: {
          description: newDescription,
          isAutoGenerated: true,
          regeneratedAt: new Date().toISOString()
        }
      },
      { status: 200 }
    );

  } catch (error) {
    console.error(`${ICONS.ERROR} [Regenerate Summary] Erro:`, error);

    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Erro ao regenerar resumo'
      },
      { status: 500 }
    );
  }
}
