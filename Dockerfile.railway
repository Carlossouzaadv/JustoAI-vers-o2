# ========================================
# JustoAI V2 - Railway Backend Dockerfile
# ========================================
# This Dockerfile is optimized for running the backend API + workers on Railway
# Frontend will be deployed separately on Vercel
#
# Optimizations:
# - Multi-stage build for minimal final image
# - npm ci instead of npm install for deterministic builds
# - Proper layer caching for faster rebuilds
# - Security: non-root user, minimal attack surface
# - Health check for liveness probes

FROM node:20-alpine AS base

# Install system dependencies once in base
RUN apk add --no-cache libc6-compat openssl && \
    npm install -g npm@latest

# ========================================
# STAGE 1: Install Dependencies
# ========================================
FROM base AS deps
WORKDIR /app

# Copy package files (changes invalidate cache)
COPY package.json package-lock.json ./

# Install dependencies with legacy peer deps support
# Using npm ci for reproducible, deterministic installs
RUN npm ci --legacy-peer-deps

# ========================================
# STAGE 2: Build Application
# ========================================
FROM base AS builder
WORKDIR /app

# Copy node_modules from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Set build-time environment variables
ENV NEXT_TELEMETRY_DISABLED=1
ENV SKIP_ENV_VALIDATION=1

# Add minimal build-time env vars (placeholder values for build only)
# Real values injected at runtime by Railway
ENV NEXT_PUBLIC_SUPABASE_URL=https://placeholder.supabase.co
ENV NEXT_PUBLIC_SUPABASE_ANON_KEY=placeholder-key-for-build-only
ENV NEXT_PUBLIC_API_URL=http://localhost:3000
ENV NEXT_PUBLIC_APP_URL=http://localhost:3000

# Generate Prisma Client
RUN npx prisma generate

# Build Next.js application
RUN npm run build

# ========================================
# STAGE 3: Production Runtime
# ========================================
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# NOTE: REDIS_DISABLED is now controlled via Railway environment variables
# Set REDIS_DISABLED=true in Railway if you want API-only mode without workers
# Set REDIS_DISABLED=false (or omit) if you have workers service enabled

# Create non-root user for security (principle of least privilege)
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy entire standalone build (simpler and more reliable)
# Next.js standalone includes everything needed to run
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./justoai-v2/.next/static
COPY --from=builder /app/public ./justoai-v2/public

# ⚠️ CRITICAL: Copy FULL node_modules for Railway backend
# This includes pdf-parse, pdfjs-dist, and other native dependencies
# that are NOT included in Next.js standalone build
# Must copy to /app/justoai-v2/ (NOT /justoai-v2/) to match standalone structure
COPY --from=builder /app/node_modules /app/justoai-v2/node_modules

# Copy lib directory with JS files (pdf-extractor.js, etc)
# These are needed for runtime require() calls that are NOT bundled
# Must copy to /app/justoai-v2/src/lib to match application root
COPY --from=builder /app/src/lib /app/justoai-v2/src/lib

# Copy Prisma client and engine for database operations
COPY --from=builder /app/node_modules/.prisma ./justoai-v2/node_modules/.prisma

# Copy prisma schema (not needed in production but useful for debugging)
COPY --from=builder /app/prisma ./prisma

# NOTE: Deliberately NOT copying workers/scripts to reduce CPU usage
# Workers will be enabled in separate service via Railway if needed

# Set proper ownership for security
RUN chown -R nextjs:nodejs /app && \
    chmod -R 755 /app

USER nextjs

# Expose port (Railway will use $PORT env variable)
EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME=0.0.0.0

# Health check for container orchestration
# Checks if API is responding to health endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Start server from standalone directory
CMD ["node", "justoai-v2/server.js"]
