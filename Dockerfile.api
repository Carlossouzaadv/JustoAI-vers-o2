# ========================================
# JustoAI V2 - Railway Backend Dockerfile
# ========================================
# Optimized for minimal image size and fast deployment
#
# Key Optimizations:
# - Multi-stage build with aggressive layer management
# - Production-only dependencies (npm ci --omit=dev)
# - Next.js standalone output + minimal runtime libraries
# - Selective file copying (no full src/lib or prisma dirs)
# - Alpine base + non-root user + security hardening
#
# Expected image size: ~250-300MB (down from 800MB+)

FROM node:20-alpine AS base

# Build arguments to force cache invalidation on rebuilds
# Use: docker build --build-arg BUILD_TIMESTAMP="$(date +%s)"
ARG BUILD_TIMESTAMP=latest
ARG BUILD_ID=unknown
RUN echo "Build timestamp: $BUILD_TIMESTAMP, Build ID: $BUILD_ID"

# Install system dependencies once in base
# Only essentials: libc6-compat + openssl + poppler-utils for PDF extraction
RUN apk add --no-cache libc6-compat openssl poppler-utils && \
    npm install -g npm@latest && \
    echo "System dependencies installed: libc6-compat, openssl, poppler-utils"

# ========================================
# STAGE 1: Install Build Dependencies
# ========================================
FROM base AS deps
WORKDIR /app

# Copy only package files
COPY package.json package-lock.json ./

# Install ALL dependencies (dev + prod needed for build)
# Using npm ci for reproducible builds
RUN npm ci --legacy-peer-deps

# ========================================
# STAGE 2: Build Application
# ========================================
FROM base AS builder
WORKDIR /app

# Copy node_modules from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy source code (Docker will use .dockerignore to exclude unnecessary files)
COPY . .

# Set build-time environment variables
ENV NEXT_TELEMETRY_DISABLED=1
ENV SKIP_ENV_VALIDATION=1
# Placeholder values for build (real values injected at runtime)
ENV NEXT_PUBLIC_SUPABASE_URL=https://placeholder.supabase.co
ENV NEXT_PUBLIC_SUPABASE_ANON_KEY=placeholder-key-for-build-only
ENV NEXT_PUBLIC_API_URL=http://localhost:3000
ENV NEXT_PUBLIC_APP_URL=http://localhost:3000

# Generate Prisma Client
RUN npx prisma generate

# Build Next.js application (outputs to .next/standalone + .next/static)
RUN npm run build

# ========================================
# STAGE 3: Install Production Dependencies
# ========================================
FROM base AS prod-deps
WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./

# Install ONLY production dependencies
# --omit=dev skips: dev, jest, typescript, etc (~200-300MB saved)
RUN npm ci --omit=dev --legacy-peer-deps && \
    npm cache clean --force

# ========================================
# STAGE 4: Production Runtime (MINIMAL)
# ========================================
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# ========================================
# Copy Application Files - NEXT.JS STANDALONE
# ========================================
# NOTE: Next.js standalone output creates everything in one directory structure
# DO NOT split across multiple paths - this breaks route resolution

# 1. Copy Next.js standalone build output (includes server.js)
# The standalone build contains: server.js, .next, node_modules references
COPY --from=builder /app/.next/standalone .

# 2. Copy Next.js static assets (required for client-side)
COPY --from=builder /app/.next/static ./.next/static

# 3. Copy public files
COPY --from=builder /app/public ./public

# 4. Copy production dependencies into node_modules
# IMPORTANT: .next/standalone expects node_modules at ./node_modules
COPY --from=prod-deps /app/node_modules ./node_modules

# 5. Copy Prisma Client
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma

# 6. Copy package.json and tsconfig for path resolution
COPY --from=builder /app/package.json ./
COPY --from=builder /app/tsconfig.json ./

# ========================================
# Cleanup & Security
# ========================================

# Set proper ownership and cleanup unnecessary files
RUN chown -R nextjs:nodejs /app && \
    chmod -R 755 /app && \
    # Remove unnecessary node_modules subdirectories
    find /app/justoai-v2/node_modules -maxdepth 2 -type d \( -name "tests" -o -name "test" -o -name "docs" -o -name "examples" \) -exec rm -rf {} + 2>/dev/null || true && \
    # Remove build artifacts from node_modules
    find /app/justoai-v2/node_modules -type f \( -name "*.ts" -o -name "*.tsx" \) ! -path "*/prisma/*" -delete 2>/dev/null || true

USER nextjs

# ========================================
# Container Configuration
# ========================================

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME=0.0.0.0

# Health check for container orchestration
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Create startup script that verifies dependencies
RUN mkdir -p /app/startup && cat > /app/startup/check-deps.sh << 'EOF'
#!/bin/sh
echo "=== Checking Runtime Dependencies ==="
echo "✅ Checking pdftotext..."
if ! which pdftotext > /dev/null 2>&1; then
  echo "❌ ERROR: pdftotext NOT found in PATH"
  exit 1
fi
PDFTOTEXT_VERSION=$(pdftotext -v 2>&1 | head -1)
echo "✅ pdftotext found: $PDFTOTEXT_VERSION"

echo "✅ Checking node..."
node --version

echo "✅ Checking /app contents..."
ls -la /app/ | head -20

echo "✅ All dependencies OK, starting server..."
exec node server.js
EOF
chmod +x /app/startup/check-deps.sh

# Start server with dependency checks
CMD ["/app/startup/check-deps.sh"]
