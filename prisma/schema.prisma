generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id                   String                  @id @default(cuid())
  name                 String
  slug                 String                  @unique
  description          String?
  logoUrl              String?
  plan                 Plan                    @default(FREE)
  status               Status                  @default(ACTIVE)
  settings             Json?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  aiCache              AiCache[]
  cases                Case[]
  clients              Client[]
  globalLogs           GlobalLog[]
  monitoredProcesses   MonitoredProcess[]
  processBatchUploads  ProcessBatchUpload[]
  reportCustomizations ReportCustomization[]
  reportExecutions     ReportExecution[]
  reportSchedules      ReportSchedule[]
  systemImports        SystemImport[]
  mappingTemplates     SystemMappingTemplate[]
  systemSyncs          SystemSync[]
  users                UserWorkspace[]
  credits              WorkspaceCredits?
  creditAllocations    CreditAllocation[]
  creditTransactions   CreditTransaction[]
  creditHolds          ScheduledCreditHold[]
  usageEvents          UsageEvent[]
  uploadBatches        UploadBatch[]
  juditTelemetry       JuditTelemetry[]
  analysisVersions     CaseAnalysisVersion[]
  analysisJobs         AnalysisJob[]
  quota                WorkspaceQuota?
  reportCache          ReportCache[]
  reportTemplates      ReportTemplate[]

  @@map("workspaces")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  avatar        String?
  role          Role            @default(USER)
  status        Status          @default(ACTIVE)
  settings      Json?
  supabaseId    String          @unique
  emailVerified Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lastLoginAt   DateTime?
  caseEvents    CaseEvent[]
  assignedCases Case[]          @relation("CaseAssignedTo")
  createdCases  Case[]          @relation("CaseCreatedBy")
  workspaces    UserWorkspace[]

  @@map("users")
}

model UserWorkspace {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  status      Status        @default(ACTIVE)
  permissions Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("user_workspaces")
}

model Client {
  id                String             @id @default(cuid())
  workspaceId       String
  name              String
  email             String?
  phone             String?
  document          String?
  type              ClientType         @default(INDIVIDUAL)
  status            Status             @default(ACTIVE)
  address           String?
  city              String?
  state             String?
  zipCode           String?
  country           String?            @default("BR")
  notes             String?
  metadata          Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  cases             Case[]
  workspace         Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  importedDataItems ImportedDataItem[]

  @@map("clients")
}

model Case {
  id                 String                @id @default(cuid())
  workspaceId        String
  clientId           String
  number             String                @unique
  title              String
  description        String?
  type               CaseType              @default(CIVIL)
  status             CaseStatus            @default(ACTIVE)
  priority           Priority              @default(MEDIUM)
  createdById        String
  assignedToId       String?
  claimValue         Decimal?              @db.Decimal(15, 2)
  fee                Decimal?              @db.Decimal(15, 2)
  feeType            FeeType               @default(FIXED)
  filingDate         DateTime?
  dueDate            DateTime?
  closedAt           DateTime?
  tags               String[]
  metadata           Json?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  analysisVersions   CaseAnalysisVersion[]
  documents          CaseDocument[]
  events             CaseEvent[]
  assignedTo         User?                 @relation("CaseAssignedTo", fields: [assignedToId], references: [id])
  client             Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdBy          User                  @relation("CaseCreatedBy", fields: [createdById], references: [id])
  workspace          Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  importedDataItems  ImportedDataItem[]
  monitoredProcesses MonitoredProcess[]
  timelineEntries    ProcessTimelineEntry[]

  @@map("cases")
}

model CaseEvent {
  id                String             @id @default(cuid())
  caseId            String
  userId            String
  type              EventType          @default(NOTE)
  title             String
  description       String?
  metadata          Json?
  createdAt         DateTime           @default(now())
  eventDate         DateTime           @default(now())
  case              Case               @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id])
  importedDataItems ImportedDataItem[]

  @@map("case_events")
}

model CaseDocument {
  id                String             @id @default(cuid())
  caseId            String
  name              String
  originalName      String
  type              DocumentType       @default(OTHER)
  mimeType          String
  size              Int
  url               String
  path              String
  pages             Int?
  extractedText     String?
  summary           String?
  tags              String[]
  processed         Boolean            @default(false)
  ocrStatus         ProcessStatus      @default(PENDING)
  // NOVOS CAMPOS PARA DEDUPLICAÇÃO E ANÁLISE
  textSha           String?            // SHA256 do conteúdo binário do arquivo
  isDuplicate       Boolean            @default(false)
  originalDocumentId String?           // Referência ao documento original se for duplicata
  cleanText         String?            // Texto limpo e normalizado (AI-friendly)
  textExtractedAt   DateTime?          // Timestamp da extração de texto
  analysisVersion   String?            // Versão da análise/modelo usado
  analysisKey       String?            // Chave para cache de análise
  workerId          String?            // ID do worker que processou
  costEstimate      Float?             // Estimativa de custo da análise
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  case              Case               @relation(fields: [caseId], references: [id], onDelete: Cascade)
  originalDocument  CaseDocument?      @relation("DocumentDuplicate", fields: [originalDocumentId], references: [id])
  duplicates        CaseDocument[]     @relation("DocumentDuplicate")
  importedDataItems ImportedDataItem[]

  @@index([textSha]) // Índice para busca rápida de duplicatas
  @@index([analysisKey]) // Índice para cache de análise
  @@map("case_documents")
}

model CaseAnalysisVersion {
  id             String        @id @default(cuid())
  caseId         String
  workspaceId    String
  version        Int
  status         ProcessStatus @default(COMPLETED)
  error          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  aiAnalysis     Json?
  analysisType   String        @default("GENERAL")
  confidence     Float         @default(0.85)
  costEstimate   Float         @default(0.0)
  extractedData  Json?
  metadata       Json?
  modelUsed      String        @default("gemini-1.5-flash")
  processingTime Int           @default(0)
  analysisKey    String?       @db.VarChar(64)
  case           Case          @relation(fields: [caseId], references: [id], onDelete: Cascade)
  workspace      Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  jobs           AnalysisJob[]

  @@unique([caseId, version])
  @@index([analysisKey])
  @@map("case_analysis_versions")
}

model ProcessTimelineEntry {
  id                String             @id @default(cuid())
  caseId            String
  contentHash       String             // Hash do conteúdo normalizado para deduplicação
  eventDate         DateTime           // Data original do andamento
  eventType         String             // Tipo do evento (ex: "Juntada", "Despacho", "Sentença")
  description       String             // Descrição do andamento
  normalizedContent String             // Conteúdo normalizado para comparação
  source            TimelineSource     // Origem do andamento
  sourceId          String?            // ID do registro original (documento, API, etc)
  metadata          Json?              // Metadados específicos da fonte
  confidence        Float              @default(1.0) // Confiança na extração
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  case              Case               @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@unique([caseId, contentHash]) // Evita duplicatas por hash do conteúdo
  @@index([eventDate]) // Índice para ordenação cronológica
  @@map("process_timeline_entries")
}

model ReportSchedule {
  id                   String            @id @default(cuid())
  workspaceId          String
  name                 String
  description          String?
  type                 ReportType        @default(CASE_SUMMARY)
  frequency            Frequency         @default(WEEKLY)
  dayOfWeek            Int?
  dayOfMonth           Int?
  time                 String?
  timezone             String?           @default("America/Sao_Paulo")
  filters              Json?
  recipients           String[]
  enabled              Boolean           @default(true)
  lastRun              DateTime?
  nextRun              DateTime?
  audienceType         AudienceType      @default(CLIENTE)
  outputFormats        OutputFormat[]    @default([PDF])
  processesLimit       Int               @default(100)
  processIds           String[]          @default([])
  distributionHash     Int?
  executionWindowStart String?           @default("23:00")
  executionWindowEnd   String?           @default("04:00")
  monthlyQuotaUsed     Int               @default(0)
  lastQuotaReset       DateTime          @default(now())
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  executions           ReportExecution[]
  workspace            Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("report_schedules")
}

model AiCache {
  id          String    @id @default(cuid())
  workspaceId String
  cacheKey    String
  type        CacheType @default(ANALYSIS)
  prompt      String
  parameters  Json?
  result      Json
  model       String
  tokens      Int?
  cost        Decimal?  @db.Decimal(10, 4)
  hits        Int       @default(0)
  lastUsed    DateTime  @default(now())
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, cacheKey])
  @@index([expiresAt])
  @@map("ai_cache")
}

model MonitoredProcess {
  id               String            @id @default(cuid())
  workspaceId      String
  caseId           String?
  processNumber    String
  court            String
  clientName       String
  processData      Json?
  monitoringStatus MonitoringStatus  @default(ACTIVE)
  lastSync         DateTime?
  syncFrequency    SyncFrequency     @default(DAILY)
  alertsEnabled    Boolean           @default(true)
  alertRecipients  String[]
  source           ProcessSource     @default(JUDIT_API)
  extractionMethod ExtractionMethod  @default(API)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  case             Case?             @relation(fields: [caseId], references: [id])
  workspace        Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  alerts           ProcessAlert[]
  movements        ProcessMovement[]
  syncLogs         ProcessSyncLog[]

  @@unique([workspaceId, processNumber])
  @@map("monitored_processes")
}

model ProcessMovement {
  id                 String           @id @default(cuid())
  monitoredProcessId String
  date               DateTime
  type               String
  description        String
  category           MovementCategory @default(OTHER)
  importance         Priority         @default(MEDIUM)
  requiresAction     Boolean          @default(false)
  deadline           DateTime?
  rawData            Json?
  aiSummary          String?
  aiTags             String[]
  read               Boolean          @default(false)
  archived           Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  alerts             ProcessAlert[]
  monitoredProcess   MonitoredProcess @relation(fields: [monitoredProcessId], references: [id], onDelete: Cascade)

  @@map("process_movements")
}

model ProcessAlert {
  id                 String           @id @default(cuid())
  monitoredProcessId String
  movementId         String?
  title              String
  message            String
  type               AlertType        @default(MOVEMENT)
  severity           Priority         @default(MEDIUM)
  sent               Boolean          @default(false)
  sentAt             DateTime?
  read               Boolean          @default(false)
  readAt             DateTime?
  recipients         String[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  monitoredProcess   MonitoredProcess @relation(fields: [monitoredProcessId], references: [id], onDelete: Cascade)
  movement           ProcessMovement? @relation(fields: [movementId], references: [id])

  @@map("process_alerts")
}

model ProcessSyncLog {
  id                 String           @id @default(cuid())
  monitoredProcessId String
  syncType           SyncType         @default(FULL)
  status             SyncStatus       @default(SUCCESS)
  newMovements       Int              @default(0)
  updatedMovements   Int              @default(0)
  errors             String[]
  duration           Int              @default(0)
  apiSource          ProcessSource    @default(JUDIT_API)
  startedAt          DateTime
  finishedAt         DateTime?
  monitoredProcess   MonitoredProcess @relation(fields: [monitoredProcessId], references: [id], onDelete: Cascade)

  @@map("process_sync_logs")
}

model ProcessBatchUpload {
  id          String      @id @default(cuid())
  workspaceId String
  fileName    String
  filePath    String
  fileSize    Int
  status      BatchStatus @default(PROCESSING)
  totalRows   Int         @default(0)
  processed   Int         @default(0)
  successful  Int         @default(0)
  failed      Int         @default(0)
  errors      Json?
  summary     Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("process_batch_uploads")
}

model SystemImport {
  id                String             @id @default(cuid())
  workspaceId       String
  fileName          String
  filePath          String
  fileSize          Int
  originalHash      String
  sourceSystem      SourceSystem       @default(UNKNOWN)
  systemVersion     String?
  detectedFormat    String?
  status            ImportStatus       @default(ANALYZING)
  progress          Int                @default(0)
  columnMapping     Json?
  dataPreview       Json?
  validation        Json?
  totalRows         Int                @default(0)
  processedRows     Int                @default(0)
  successfulRows    Int                @default(0)
  failedRows        Int                @default(0)
  skippedRows       Int                @default(0)
  importedCases     Int                @default(0)
  importedClients   Int                @default(0)
  importedEvents    Int                @default(0)
  importedDocuments Int                @default(0)
  errors            Json?
  warnings          Json?
  summary           Json?
  importSettings    Json?
  overwriteData     Boolean            @default(false)
  startedAt         DateTime           @default(now())
  finishedAt        DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  importedItems     ImportedDataItem[]
  workspace         Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("system_imports")
}

model ImportedDataItem {
  id               String           @id @default(cuid())
  systemImportId   String
  originalId       String?
  dataType         ImportedDataType
  status           ImportItemStatus @default(IMPORTED)
  originalData     Json
  mappedData       Json?
  caseId           String?
  clientId         String?
  eventId          String?
  documentId       String?
  lineNumber       Int
  importOrder      Int
  validationErrors Json?
  warnings         Json?
  importedAt       DateTime         @default(now())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  case             Case?            @relation(fields: [caseId], references: [id])
  client           Client?          @relation(fields: [clientId], references: [id])
  document         CaseDocument?    @relation(fields: [documentId], references: [id])
  event            CaseEvent?       @relation(fields: [eventId], references: [id])
  systemImport     SystemImport     @relation(fields: [systemImportId], references: [id], onDelete: Cascade)

  @@map("imported_data_items")
}

model SystemMappingTemplate {
  id             String       @id @default(cuid())
  workspaceId    String
  name           String
  description    String?
  sourceSystem   SourceSystem
  version        String       @default("1.0")
  columnMappings Json
  fieldMappings  Json
  transformRules Json?
  isDefault      Boolean      @default(false)
  isActive       Boolean      @default(true)
  usageCount     Int          @default(0)
  lastUsedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  workspace      Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, name])
  @@map("system_mapping_templates")
}

model SystemSync {
  id              String          @id @default(cuid())
  workspaceId     String
  sourceSystem    SourceSystem
  syncType        SyncType        @default(FULL)
  syncMode        SyncMode        @default(IMPORT_ONLY)
  schedule        SyncSchedule    @default(MANUAL)
  lastSync        DateTime?
  nextSync        DateTime?
  isActive        Boolean         @default(true)
  currentStatus   SyncStatus      @default(SUCCESS)
  syncSettings    Json?
  filterCriteria  Json?
  totalSyncs      Int             @default(0)
  successfulSyncs Int             @default(0)
  failedSyncs     Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  syncLogs        SystemSyncLog[]
  workspace       Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("system_syncs")
}

model SystemSyncLog {
  id           String     @id @default(cuid())
  systemSyncId String
  syncType     SyncType   @default(FULL)
  status       SyncStatus @default(SUCCESS)
  itemsChecked Int        @default(0)
  itemsCreated Int        @default(0)
  itemsUpdated Int        @default(0)
  itemsSkipped Int        @default(0)
  itemsFailed  Int        @default(0)
  duration     Int        @default(0)
  errors       Json?
  summary      Json?
  startedAt    DateTime
  finishedAt   DateTime?
  createdAt    DateTime   @default(now())
  systemSync   SystemSync @relation(fields: [systemSyncId], references: [id], onDelete: Cascade)

  @@map("system_sync_logs")
}

model ReportCustomization {
  id                 String    @id @default(cuid())
  workspaceId        String
  profileName        String
  isDefault          Boolean   @default(false)
  companyName        String
  companyAddress     String?
  companyPhone       String?
  companyEmail       String?
  companyWebsite     String?
  primaryColor       String    @default("#1E40AF")
  secondaryColor     String    @default("#64748B")
  accentColor        String    @default("#10B981")
  backgroundColor    String    @default("#FFFFFF")
  textColor          String    @default("#1F2937")
  logoUrl            String?
  logoBase64         String?
  logoWidth          Int?      @default(80)
  logoHeight         Int?      @default(60)
  logoPosition       String    @default("left")
  headerText         String?
  headerHeight       Int?      @default(60)
  showCompanyInfo    Boolean   @default(true)
  showGenerationInfo Boolean   @default(true)
  footerText         String?
  footerHeight       Int?      @default(30)
  showPageNumbers    Boolean   @default(true)
  showGeneratedBy    Boolean   @default(true)
  watermark          String?
  watermarkOpacity   Float?    @default(0.05)
  watermarkRotation  Int?      @default(-45)
  fontSize           Int       @default(12)
  fontFamily         String    @default("Segoe UI")
  lineHeight         Float     @default(1.4)
  marginTop          Int       @default(20)
  marginRight        Int       @default(15)
  marginBottom       Int       @default(20)
  marginLeft         Int       @default(15)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  workspace          Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, profileName])
  @@index([workspaceId, isDefault])
  @@map("report_customizations")
}

model ReportExecution {
  id                    String          @id @default(cuid())
  workspaceId           String
  scheduleId            String?
  reportType            ReportType      @default(CASE_SUMMARY)
  parameters            Json?
  filters               Json?
  recipients            String[]
  status                ExecutionStatus @default(AGENDADO)
  result                Json?
  filePath              String?
  fileSize              Int?
  startedAt             DateTime        @default(now())
  completedAt           DateTime?
  duration              Int?
  tokensUsed            Int?            @default(0)
  estimatedCost         Decimal?        @db.Decimal(10, 4)
  error                 String?
  retryCount            Int             @default(0)
  audienceType          AudienceType    @default(CLIENTE)
  outputFormats         OutputFormat[]  @default([PDF])
  processCount          Int             @default(0)
  cacheKey              String?
  cacheHit              Boolean         @default(false)
  quotaConsumed         Int             @default(1)
  scheduledFor          DateTime?
  fileUrls              Json?
  lastMovementTimestamp DateTime?
  deltaDataOnly         Boolean         @default(false)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  schedule              ReportSchedule? @relation(fields: [scheduleId], references: [id])
  workspace             Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, status])
  @@index([scheduleId])
  @@index([scheduledFor, status])
  @@map("report_executions")
}

model GlobalLog {
  id          String      @id @default(cuid())
  workspaceId String?
  level       LogLevel    @default(INFO)
  category    LogCategory @default(SYSTEM)
  message     String
  data        Json?
  userId      String?
  sessionId   String?
  ipAddress   String?
  userAgent   String?
  requestId   String?
  traceId     String?
  duration    Int?
  createdAt   DateTime    @default(now())
  workspace   Workspace?  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, level])
  @@index([category, createdAt])
  @@index([userId])
  @@map("global_logs")
}

enum Plan {
  FREE
  STARTER
  PROFESSIONAL
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum Role {
  ADMIN
  USER
  VIEWER
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum ClientType {
  INDIVIDUAL
  COMPANY
  GOVERNMENT
  NGO
}

enum CaseType {
  CIVIL
  CRIMINAL
  LABOR
  FAMILY
  COMMERCIAL
  ADMINISTRATIVE
  CONSTITUTIONAL
  TAX
  OTHER
}

enum CaseStatus {
  ACTIVE
  SUSPENDED
  CLOSED
  ARCHIVED
  CANCELLED
  UNASSIGNED // Novo status para processos não atribuídos
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum FeeType {
  FIXED
  HOURLY
  SUCCESS_FEE
  MIXED
}

enum EventType {
  NOTE
  CALL
  MEETING
  EMAIL
  DOCUMENT_RECEIVED
  DOCUMENT_SENT
  HEARING
  DEADLINE
  PAYMENT
  OTHER
}

enum DocumentType {
  CONTRACT
  PETITION
  MOTION
  EVIDENCE
  CORRESPONDENCE
  COURT_ORDER
  JUDGMENT
  APPEAL
  AGREEMENT
  INVOICE
  OTHER
}

enum ProcessStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum AnalysisType {
  GENERAL
  RISK_ASSESSMENT
  DOCUMENT_REVIEW
  CASE_STRATEGY
  PRECEDENT_RESEARCH
  CONTRACT_ANALYSIS
  COMPLIANCE_CHECK
}

enum ReportType {
  CASE_SUMMARY
  FINANCIAL
  PRODUCTIVITY
  DEADLINE_ALERTS
  CUSTOM
  COMPLETO
  NOVIDADES
}

enum Frequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum CacheType {
  ANALYSIS
  DOCUMENT_SUMMARY
  PRECEDENT_SEARCH
  RISK_ASSESSMENT
  CONTRACT_REVIEW
}

enum MonitoringStatus {
  ACTIVE
  PAUSED
  STOPPED
  ERROR
}

enum SyncFrequency {
  HOURLY
  DAILY
  WEEKLY
  MANUAL
}

enum ProcessSource {
  JUDIT_API
  CODILO_API
  MANUAL_INPUT
  EXCEL_UPLOAD
}

enum ExtractionMethod {
  API
  WEB_SCRAPING
  MANUAL
}

enum MovementCategory {
  HEARING
  DECISION
  PETITION
  DOCUMENT_REQUEST
  DEADLINE
  NOTIFICATION
  APPEAL
  SETTLEMENT
  OTHER
}

enum AlertType {
  MOVEMENT
  DEADLINE
  ERROR
  SYNC_FAILURE
  IMPORTANT_DECISION
}

enum SyncType {
  FULL
  INCREMENTAL
  MANUAL
}

enum SyncStatus {
  SUCCESS
  PARTIAL_SUCCESS
  FAILED
  TIMEOUT
}

enum BatchStatus {
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum SourceSystem {
  PROJURIS
  LEGAL_ONE
  ASTREA
  CP_PRO
  SAJ
  ESAJ
  PJE
  THEMIS
  ADVBOX
  JUSBRASIL
  UNKNOWN
}

enum ImportStatus {
  ANALYZING
  MAPPING
  VALIDATING
  IMPORTING
  COMPLETED
  FAILED
  CANCELLED
}

enum ImportedDataType {
  CASE
  CLIENT
  EVENT
  DOCUMENT
  LAWYER
  CONTACT
  FINANCIAL
  DEADLINE
  OTHER
}

enum ImportItemStatus {
  IMPORTED
  UPDATED
  SKIPPED
  FAILED
  DUPLICATE
}

enum SyncMode {
  IMPORT_ONLY
  BIDIRECTIONAL
  EXPORT_ONLY
}

enum SyncSchedule {
  MANUAL
  DAILY
  WEEKLY
  MONTHLY
  REAL_TIME
}

enum ExecutionStatus {
  AGENDADO
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum LogCategory {
  SYSTEM
  USER_ACTION
  API_CALL
  SYNC
  REPORT
  AUTH
  UPLOAD
  ANALYSIS
  MONITORING
}

enum TimelineSource {
  DOCUMENT_UPLOAD // Extraído de documento PDF
  API_JUDIT       // Obtido via API Judit
  MANUAL_ENTRY    // Inserido manualmente
  SYSTEM_IMPORT   // Importado de sistema externo
  AI_EXTRACTION   // Extraído por IA
}

// ================================================================
// SISTEMA UNIFICADO DE CRÉDITOS
// ================================================================

model WorkspaceCredits {
  id                          String    @id @default(cuid())
  workspaceId                 String    @unique
  reportCreditsBalance        Decimal   @default(0) @db.Decimal(10, 2)
  fullCreditsBalance          Decimal   @default(0) @db.Decimal(10, 2)
  reportCreditsRolloverCap    Decimal   @default(36) @db.Decimal(10, 2)
  fullCreditsRolloverCap      Decimal   @default(50) @db.Decimal(10, 2)
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  workspace                   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workspace_credits")
}

model CreditAllocation {
  id                String             @id @default(cuid())
  workspaceId       String
  type              CreditAllocationType
  amount            Decimal            @db.Decimal(10, 2)
  remainingAmount   Decimal            @db.Decimal(10, 2)
  expiresAt         DateTime?
  sourceDescription String?
  createdAt         DateTime           @default(now())
  workspace         Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  transactions      CreditTransaction[]

  @@index([workspaceId, expiresAt, createdAt])
  @@index([expiresAt])
  @@map("credit_allocations")
}

model CreditTransaction {
  id               String            @id @default(cuid())
  workspaceId      String
  allocationId     String?
  type             CreditTransactionType
  creditCategory   CreditCategory
  amount           Decimal           @db.Decimal(10, 2)
  reason           String
  metadata         Json              @default("{}")
  createdAt        DateTime          @default(now())
  workspace        Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  allocation       CreditAllocation? @relation(fields: [allocationId], references: [id], onDelete: SetNull)

  @@index([workspaceId, createdAt])
  @@index([allocationId])
  @@map("credit_transactions")
}

model ScheduledCreditHold {
  id                      String    @id @default(cuid())
  workspaceId             String
  reportId                String
  reportCreditsReserved   Decimal   @default(0) @db.Decimal(10, 2)
  fullCreditsReserved     Decimal   @default(0) @db.Decimal(10, 2)
  expiresAt               DateTime
  createdAt               DateTime  @default(now())
  workspace               Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([expiresAt])
  @@map("scheduled_credit_holds")
}

model UsageEvent {
  id                String        @id @default(cuid())
  workspaceId       String
  eventType         String
  resourceType      String
  resourceId        String?
  reportCreditsCost Decimal       @default(0) @db.Decimal(10, 2)
  fullCreditsCost   Decimal       @default(0) @db.Decimal(10, 2)
  status            UsageStatus   @default(COMPLETED)
  metadata          Json          @default("{}")
  createdAt         DateTime      @default(now())
  workspace         Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt])
  @@index([eventType, createdAt])
  @@map("usage_events")
}

model PlanConfiguration {
  id                         String   @id @default(cuid())
  planName                   String   @unique
  monitorLimit               Int
  reportCreditsMonth         Decimal  @db.Decimal(10, 2)
  fullCreditsMonth           Decimal  @db.Decimal(10, 2)
  firstMonthFullBonus        Decimal  @db.Decimal(10, 2)
  firstMonthBonusExpiryDays  Int      @default(90)
  fullRolloverCap            Decimal  @db.Decimal(10, 2)
  reportRolloverCap          Decimal  @db.Decimal(10, 2)
  tier1Processes             Int      @default(5)
  tier1CreditCost            Decimal  @default(0.25) @db.Decimal(10, 2)
  tier2Processes             Int      @default(12)
  tier2CreditCost            Decimal  @default(0.5) @db.Decimal(10, 2)
  tier3Processes             Int      @default(25)
  tier3CreditCost            Decimal  @default(1.0) @db.Decimal(10, 2)
  fullCreditPerBatch         Int      @default(10)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  @@map("plan_configurations")
}

// Enums para o sistema de créditos
enum CreditAllocationType {
  MONTHLY
  BONUS
  PACK
}

enum CreditTransactionType {
  DEBIT
  CREDIT
}

enum CreditCategory {
  REPORT
  FULL
}

enum UsageStatus {
  COMPLETED
  FAILED
  INSUFFICIENT_CREDITS
}

// ================================================================
// UPLOAD BATCH SYSTEM MODELS
// ================================================================

model UploadBatch {
  id           String               @id @default(cuid())
  workspaceId  String
  fileName     String
  filePath     String?
  fileSize     BigInt
  status       UploadBatchStatus    @default(PROCESSING)
  totalRows    Int                  @default(0)
  processed    Int                  @default(0)
  successful   Int                  @default(0)
  failed       Int                  @default(0)
  errors       Json                 @default("[]")
  summary      Json                 @default("{}")
  config       Json                 @default("{}")
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  workspace    Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  rows         UploadBatchRow[]
  events       UploadBatchEvent[]
  telemetry    JuditTelemetry[]

  @@index([workspaceId, createdAt])
  @@index([status, createdAt])
  @@map("upload_batch")
}

model UploadBatchRow {
  id           String            @id @default(cuid())
  batchId      String
  rowIndex     Int
  rowData      Json
  status       UploadRowStatus   @default(PENDING)
  processId    String?
  errorMessage Json?
  retryCount   Int               @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  batch        UploadBatch       @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@unique([batchId, rowIndex])
  @@index([batchId, status])
  @@map("upload_batch_row")
}

model UploadBatchEvent {
  id        String      @id @default(cuid())
  batchId   String
  eventType String
  payload   Json
  createdAt DateTime    @default(now())
  batch     UploadBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@index([batchId, createdAt])
  @@index([eventType, createdAt])
  @@map("upload_batch_events")
}

model JuditTelemetry {
  id                String       @id @default(cuid())
  workspaceId       String
  batchId           String?
  processNumber     String
  tribunal          String
  success           Boolean
  responseTimeMs    Int?
  docsRetrieved     Int          @default(0)
  movementsCount    Int          @default(0)
  partiesCount      Int          @default(0)
  errorCode         String?
  errorMessage      String?
  retryCount        Int          @default(0)
  rateLimitHit      Boolean      @default(false)
  createdAt         DateTime     @default(now())
  workspace         Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  batch             UploadBatch? @relation(fields: [batchId], references: [id], onDelete: SetNull)

  @@index([workspaceId, createdAt])
  @@index([batchId, createdAt])
  @@index([success, createdAt])
  @@map("judit_telemetry")
}

// Enums para upload batch system
enum UploadBatchStatus {
  PROCESSING
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
}

enum UploadRowStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  SKIPPED
  CANCELLED
}

// Missing models that were accidentally removed
model AnalysisJob {
  id                String                @id @default(cuid())
  processId         String
  workspaceId       String
  analysisKey       String                @db.VarChar(64)
  status            JobStatus             @default(QUEUED)
  lockToken         String?               @db.VarChar(128)
  lockAcquiredAt    DateTime?
  lockExpiresAt     DateTime?
  analysisType      AnalysisType
  modelHint         String                @default("gemini-1.5-flash")
  filesMetadata     Json                  @default("[]")
  progress          Int                   @default(0)
  resultVersionId   String?
  createdAt         DateTime              @default(now())
  startedAt         DateTime?
  finishedAt        DateTime?
  workerId          String?
  retryCount        Int                   @default(0)
  metadata          Json                  @default("{}")
  workspace         Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  resultVersion     CaseAnalysisVersion?  @relation(fields: [resultVersionId], references: [id])

  @@index([analysisKey])
  @@index([status, createdAt])
  @@index([workspaceId, createdAt])
  @@index([lockExpiresAt])
  @@map("analysis_jobs")
}

model WorkspaceQuota {
  id                     String   @id @default(cuid())
  workspaceId            String   @unique
  plan                   Plan     @default(FREE)
  reportsMonthlyLimit    Int      @default(20)
  reportProcessesLimit   Int      @default(100)
  reportsUsedThisMonth   Int      @default(0)
  quotaResetDate         DateTime @default(now())
  overrideLimits         Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  workspace              Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workspace_quotas")
}

model ReportCache {
  id                     String       @id @default(cuid())
  cacheKey               String       @unique
  workspaceId            String
  reportType             ReportType
  processIds             String[]
  audienceType           AudienceType
  lastMovementTimestamp  DateTime
  cachedData             Json
  fileUrls               Json?
  createdAt              DateTime     @default(now())
  expiresAt              DateTime
  workspace              Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([cacheKey])
  @@index([expiresAt])
  @@index([lastMovementTimestamp])
  @@map("report_cache")
}

model ReportTemplate {
  id               String    @id @default(cuid())
  workspaceId      String
  name             String
  description      String?
  templateType     String    @default("DEFAULT") // 'DEFAULT', 'CUSTOM_HEADER_FOOTER', 'FULL_TEMPLATE'
  headerContent    String?
  footerContent    String?
  templateFileUrl  String?
  styles           Json?
  isDefault        Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, name])
  @@map("report_templates")
}

model AnalysisCache {
  id                 String    @id @default(cuid())
  analysisKey        String    @unique @db.VarChar(64)
  resultData         Json
  modelUsed          String
  analysisType       String
  processId          String
  lastMovementDate   DateTime?
  createdAt          DateTime  @default(now())
  expiresAt          DateTime?
  accessCount        Int       @default(0)
  lastAccessedAt     DateTime  @default(now())
  compressed         Boolean   @default(false)
  dataSizeBytes      Int       @default(0)

  @@index([analysisKey])
  @@index([processId, createdAt])
  @@index([expiresAt])
  @@map("analysis_cache")
}

// Missing enums
enum JobStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum AudienceType {
  CLIENTE
  DIRETORIA
  USO_INTERNO
}

enum OutputFormat {
  PDF
  DOCX
}

