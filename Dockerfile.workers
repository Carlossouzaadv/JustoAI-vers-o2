# ========================================
# JustoAI V2 - Workers Dockerfile
# ========================================
# Separate service for background workers (BullMQ)
# NO NEXT.JS BUILD - Only runs Node.js workers
#
# Key optimizations:
# - npm ci for deterministic builds
# - NODE_ENV=production for clean installs
# - No frontend dependencies installed
# - Minimal production image
# ========================================

FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache libc6-compat openssl && \
    npm install -g npm@latest

# ========================================
# STAGE 1: Install Dependencies (Production Only)
# ========================================
FROM base AS deps
WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./

# Install dependencies
# NODE_ENV=production skips devDependencies
# This prevents frontend tools from being installed
RUN NODE_ENV=production npm ci --legacy-peer-deps

# ========================================
# STAGE 2: Generate Prisma Client
# ========================================
FROM base AS prisma-gen
WORKDIR /app

# Copy package and all dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY package.json ./
COPY prisma ./prisma

# Generate Prisma Client (needed for database access)
RUN npx prisma generate

# ========================================
# STAGE 3: Production Runtime
# ========================================
FROM base AS runtime
WORKDIR /app

ENV NODE_ENV=production

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 workers

# Copy production node_modules only
COPY --from=deps /app/node_modules ./node_modules

# Copy Prisma client
COPY --from=prisma-gen /app/node_modules/.prisma ./node_modules/.prisma

# Copy only what workers need
COPY package.json ./
COPY prisma ./prisma
COPY src/workers ./src/workers
COPY src/lib ./src/lib

# Set ownership
RUN chown -R workers:nodejs /app && chmod -R 755 /app

USER workers

# Health check
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=3 \
  CMD pgrep -f "juditOnboardingWorker" || exit 1

# ========================================
# STARTUP
# ========================================

# Run worker directly with tsx (no build needed)
CMD ["npx", "tsx", "src/workers/juditOnboardingWorker.ts"]
