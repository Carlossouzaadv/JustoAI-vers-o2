# ========================================
# JustoAI V2 - Workers Dockerfile
# ========================================
# Separate service for background workers (BullMQ)
# Optimized for low idle costs on Railway + Upstash Redis
#
# Cost Optimization Strategy:
# - Minimal base image (alpine)
# - Only necessary dependencies
# - Workers idle when no jobs (near-zero CPU)
# - Upstash Redis charges per request (~$0.20/GB)
# - Estimated idle cost: $2-5/month
# - Estimated active cost: $10-15/month (100 jobs/day)
#
# Optimizations:
# - npm ci for deterministic builds
# - Proper layer caching
# - Security: non-root user, minimal permissions
# - Slim production image
# ========================================

FROM node:20-alpine AS base

# Install system dependencies once in base
RUN apk add --no-cache libc6-compat openssl && \
    npm install -g npm@latest

# ========================================
# STAGE 1: Install Dependencies
# ========================================
FROM base AS deps
WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./

# Install dependencies with legacy peer deps support
# Using npm ci for reproducible, deterministic installs
RUN npm ci --legacy-peer-deps

# ========================================
# STAGE 2: Build Application
# ========================================
FROM base AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Generate Prisma Client
RUN npx prisma generate

# Build TypeScript workers (if needed)
# Workers use tsx runtime, so no compilation needed

# ========================================
# STAGE 3: Production Runner
# ========================================
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production

# Create non-root user for security (principle of least privilege)
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 workers

# Copy necessary files from builder
COPY --from=builder /app/package.json ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/src ./src

# Copy workers directory
COPY --from=builder /app/src/workers ./src/workers

# Copy lib directory (services, queue, redis)
COPY --from=builder /app/src/lib ./src/lib

# Copy Prisma client
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma

# Set proper ownership and permissions
RUN chown -R workers:nodejs /app && \
    chmod -R 755 /app

USER workers

# Health check (optional - checks if worker process is running)
# Note: This may fail if no workers are actively running, so it's optional
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=3 \
  CMD pgrep -f "juditOnboardingWorker" || exit 1

# ========================================
# WORKER STARTUP
# ========================================

# Default: Run JUDIT Onboarding Worker
# You can override this in Railway to run different workers
CMD ["npx", "tsx", "src/workers/juditOnboardingWorker.ts"]

# Alternative: Run multiple workers (uncomment if needed)
# CMD ["sh", "-c", "npx tsx src/workers/juditOnboardingWorker.ts & npx tsx src/workers/anotherWorker.ts & wait"]
